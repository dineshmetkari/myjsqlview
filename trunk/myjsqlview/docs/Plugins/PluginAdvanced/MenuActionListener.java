//=================================================================
//            TableFieldProfiler MenuActionListener
//=================================================================
//
//    This class provides the means for controlling the required
// actions needed to execute the various activities used in the
// profiler plugin. The events are generated by the Profiler_MenuBar
// & Profiler_ToolBar classes.
//
//                 << MenuActionListener.java >>
//
//=================================================================
// Copyright (C) 2005-2010 Dana M. Proctor.
// Version 1.2 06/29/2010
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version
// 2 of the License, or (at your option) any later version. This
// program is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
// the GNU General Public License for more details. You should
// have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// (http://opensource.org)
//
//=================================================================
// Revision History
// Changes to the code should be documented here and reflected
// in the present version number. Author information should
// also be included with the original copyright author.
//=================================================================
// Version 1.0 Original DandyDataProfiler MenuActionListener Class.
//         1.1 Changed to Table Field Profiler Code.
//         1.2 Added File Menu Actions and Appropriate Methods to Handle the
//             Events via openAction() & saveAction().
//         
//-----------------------------------------------------------------
//                 danap@dandymadeproductions.com
//=================================================================

package com.dandymadeproductions.tablefieldprofiler;

import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import com.dandymadeproductions.myjsqlview.MyJSQLView_Utils;
import com.dandymadeproductions.myjsqlview.MyJFileFilter;
import com.dandymadeproductions.myjsqlview.TableTabPanel;

/**
 *    The MenuActionListener class provides the means for controlling the
 * required actions needed to execute the various activities used in the
 * profiler plugin. The events are generated by the Profiler_MenuBar &
 * Profiler_ToolBar classes. 
 * 
 * @author Vivek Singh, Dana M. Proctor
 * @version 1.2 06/28/2010
 */

class MenuActionListener implements ActionListener
{
   private JPanel mainPanel;
   private JFrame parent;
   private CardLayout panelCardLayout;
   private static String lastSaveDirectory = "";

   //==============================================================
   // MenuActionListener Constructor.
   //==============================================================

   public MenuActionListener(JFrame mainFrame, JPanel dataProfilerMainPanel, CardLayout profilerCardLayout)
   {
      parent = mainFrame;
      mainPanel = dataProfilerMainPanel;
      panelCardLayout = profilerCardLayout;
   }

   //==============================================================
   // ActionEvent Listener method for detecting the inputs from the
   // application and directing to the appropriate routine.
   //==============================================================

   public void actionPerformed(ActionEvent evt)
   {
      // Setting up some needed instance variables.
      String actionCommand;
      Object item;

      // Initializing
      item = evt.getSource();

      if (item instanceof JMenuItem)
      {
         actionCommand = ((JMenuItem) item).getActionCommand();
      }

      else if (item instanceof JButton)
         actionCommand = ((JButton) item).getActionCommand();

      else
         actionCommand = "";

      // System.out.println(actionCommand);

      // Directing Appropriate Actions.

      // ==============
      // Profiler Selection

      // Information/Analysis
      if (actionCommand.equals("TFI") || actionCommand.equals("TFA"))
      {
         if (actionCommand.equals("TFI"))
            panelCardLayout.show(mainPanel, "Information");
         else
            panelCardLayout.show(mainPanel, "Analysis");
         return;
      }

      // ==============
      // File Actions

      // Open
      if (actionCommand.equals("FO") && TableFieldAnalysisPanel.getTableCount() != 0)
      {
         openAction(parent);
         return;
      }
      
      // Save & Save As..
      if ((actionCommand.equals("FS") || actionCommand.equals("FSA"))
           && TableFieldAnalysisPanel.getTableCount() != 0)
      {
         saveAction(parent, actionCommand);
         return;
      }
      
      // Exit
      if (actionCommand.equals("FE"))
      {
         System.out.println("File Exit");
         return;
      }
   }
   
   //==============================================================
   // Class Method to open a saved configuration state file for
   // a database table.
   //==============================================================

   private static void openAction(JFrame parent)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      String fileName;

      // Choosing the directory to import data from.
      if (lastSaveDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastSaveDirectory));

      // Add a FileFilter for *.myj and open dialog.
      dataFileChooser.setFileFilter(new MyJFileFilter());
      
      int result = dataFileChooser.showOpenDialog(parent);

      // Looks like might be good so lets check and read data.
      if (result == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory so can be used again.
         lastSaveDirectory = dataFileChooser.getCurrentDirectory().toString();

         // Collect file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + MyJSQLView_Utils.getFileSeparator() + fileName;

         // Try Loading the State.
         if (!fileName.equals(""))
         {  
            new LoadTableStateThread(fileName);
         }
         else
         {
            String optionPaneStringErrors = "File NOT Found";
            JOptionPane.showMessageDialog(null, optionPaneStringErrors,
                                          "Alert", JOptionPane.ERROR_MESSAGE);
         }
      }
   }
   
   //==============================================================
   // Class Method to save the currented selected database table's
   // state, Ie. query, table columns, table row number, and sort/
   // search fields.
   //==============================================================

   private static void saveAction(JFrame parent, String actionCommand)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      TableTabPanel selectedTableTabPanel;
      String exportedTable, fileName;
      int resultsOfFileChooser;
      Object dumpData;
      
      // Setting up a file name based on whether there has
      // already been a save of the table or save as action.

      // Directory
      if (lastSaveDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastSaveDirectory));

      // Create the File Name from the selected database table
      // panel's state to be exported.
      
      selectedTableTabPanel = TableFieldAnalysisPanel.getSelectedTableTabPanel();
      if (selectedTableTabPanel == null)
         return;
      exportedTable = selectedTableTabPanel.getTableName();

      if (actionCommand.equals("FS") && !selectedTableTabPanel.getSaveFileName().equals(""))
         fileName = selectedTableTabPanel.getSaveFileName();
      else
      {
         if (!selectedTableTabPanel.getSaveFileName().equals(""))
            fileName = selectedTableTabPanel.getSaveFileName();
         else
         { 
            if (exportedTable.indexOf(".") != -1)
               fileName = exportedTable.replace('.', '_');
            else
               fileName = exportedTable;
            fileName += ".myj";
         }
      }
      dataFileChooser.setSelectedFile(new File(fileName));

      // Open the file chooser Dialog as needed.
      
      if (actionCommand.equals("FS") && !selectedTableTabPanel.getSaveFileName().equals(""))
         resultsOfFileChooser = JFileChooser.APPROVE_OPTION;
      else
         resultsOfFileChooser = MyJSQLView_Utils.processFileChooserSelection(parent, dataFileChooser);

      // Looks like might be good so lets check and then write data.
      if (resultsOfFileChooser == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory and file name so can be used again.
         lastSaveDirectory = dataFileChooser.getCurrentDirectory().toString();
         selectedTableTabPanel.setSaveFileName(dataFileChooser.getSelectedFile().getName());

         // Get the file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + MyJSQLView_Utils.getFileSeparator()
                    + fileName;

         // Save the state as needed.
         if (!fileName.equals(""))
         {
            dumpData = TableFieldAnalysisPanel.getTableTabPanel(exportedTable).getState();
            new SaveTableStateThread(fileName, dumpData);
         }
         else
         {
            String optionPaneStringErrors = "File NOT Found";
            JOptionPane.showMessageDialog(null, optionPaneStringErrors,
                                          "Alert", JOptionPane.ERROR_MESSAGE);
         }
      }
   }
}