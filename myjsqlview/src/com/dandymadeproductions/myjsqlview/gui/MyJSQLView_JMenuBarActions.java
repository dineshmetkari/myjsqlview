//=================================================================
//                    MyJSQLView JMenuBar Actions
//=================================================================
//
//    This class provides the means for selecting the type of actions
// to execute that are a result of the MyJSQLView_JMenuBar.actionPerformed()
// events generated by the JMenuBar & JTooBar in MyJSQLView.
//
//               << MyJSQLView_JMenuBarActions.java >>
//
//=================================================================
// Copyright (C) 2005-2013 Dana M. Proctor
// Version 7.50 02/27/2013
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version
// 2 of the License, or (at your option) any later version. This
// program is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
// the GNU General Public License for more details. You should
// have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// (http://opensource.org)
//
//=================================================================
// Revision History
// Changes to the code should be documented here and reflected
// in the present version number. Author information should
// also be included with the original copyright author.
//=================================================================
// Version 1.0 Original MyJSQLView JMenuBarActions Class.
//         1.1 Selection of Proper TableTabPanel in Print Action.
//         1.2 Modification of Preferences Menu to Include Summary
//             Table Fields and Date Format, YYYY-MM-DD & MM-DD-YYYY.
//         1.3 Preferences Menu Date Format Removed.
//         1.4 Basic Data Export Implementation.
//         1.5 Data delimiter Implementation.
//         1.6 Replaced Deprecated Method show() With setVisible().
//         1.7 Extends MyJSQLView.
//         1.8 Updated Help Menu Commands for MyJSQLView Manual,
//             & WebSite.
//         1.9 Implemented the Edit|Preferences|Table Fields.
//         2.0 Menu Item Command for Tools|Query Frame.
//         2.1 Data | Export | SQL Structure/Data | Table
//             Implementation, Per Developer poisonerbg.
//         2.2 File Seperator In File Name Creation in Import
//             and Export.
//         2.3 Changes to Handling in Data | Import/Export
//             SQL.
//         2.4 Class WriteDataFile Boolean Argument Addition, false.
//         2.5 Set A Default File Name for Data Exports, Based
//             on Database Table and Date.
//         2.6 DataDumpThread Class Argument Additions,
//             tableColumnClassHashMap & tableColumnTypeHashMap.
//         2.7 SQLDataDumpThread Class Argument Additions,
//             tableColumnClassHashMap & tableColumnTypeHashMap.
//         2.8 Replace String Method replace() with replaceAll() for
//             Export Date Format String YYYY.MM.DD.
//         2.9 Exported File Name Date YYYYmmdd.
//         3.0 JOptionPane Notification for SQL Data Import & Export.
//         3.1 Temporary Allowed SQL Data Import So Can Use. Bug Still
//             Not Fixed.
//         3.2 Class Method outputSummaryTable Data Output Corrected
//             to Have Selected Data delimiter Output, Instead of ';'.
//         3.3 Removed Action for Data | Preferences Menu. Modified
//             Action for Edit | Preferences Menu.
//         3.4 Correct Action Command Conditionals for Data | Export
//             Menu. Temporary Fix After Changes Made to MenuBar. Will
//             Need to Revisit.
//         3.5 Added Class Method setPreferencesNotVisible() & Class
//             Instance preferencesVisible.
//         3.6 Updated Data Export Actions to Reflect Changes in SQL
//             Output Options. Class Method outputDatabaseScheme().
//             Cleaned up Some.
//         3.7 Correct An Introduced Bug From 3.6. Data | Export HashMap
//             Loading for if (... | actionCommand.indexOf("DESQL") != -1).
//             Removed Warning JOptionPane During SQL Table Exports.
//         3.8 Boolean limits Argument to SQLDataDumpThread Class and
//             Implementation of Data Export SQL Tab Summary Table.
//         3.9 Changed the Size of the WebSite HelpFrame.
//         4.0 Modififed Help Menu. Manual, Legal, Release Notes (Readme),
//             and About. Appropriate Actions Implmented.
//         4.1 Help | About Menu Changed to Refect Class Name From
//             AboutDialog to AboutFrame and Arguments.
//         4.2 Changed Warning Message on SQL Import and the OptionPane
//             to InputDialog.
//         4.3 Null Argument in Menu | Help HelpFrames.
//         4.4 Class Method outputSummaryTable() Change in datadelimiterString
//             Assignment. MyJSQLView.getDataExportProperties().getDatadelimiter().
//         4.5 Added the Option From the Preferences Data|Export|SQL to
//             Allow the Table Dropping Statement to be Included in Class
//             Method outputDatabaseSchemes().
//         4.6 Class Instance tableColumnSizeHashMap & Same As Argument to
//			      DataDumpThread in CSV Table Export.
//         4.7 Changed Class Method outputSummaryTable to protected.
//         4.8 Corrected References to CSV.
//         4.9 Class Method outputSummaryTable() Stripped Newlines and
//             Carriage Returns From Data Output As Needed.
//         5.0 Initial Setup for ActionCommand 'flush'. Class Instance
//             item Changed to Object, Checking for Appropriate Type to
//             Cast to Item.
//         5.1 Implemented Action for ActionCommand 'flush' Through New
//             Class Method flushPrivileges().
//         5.2 Outlined Action for ActionCommand 'DESQLD', Data | Export |
//             SQL Format | Database. Modified Output File Name,
//             Appended_scheme, for Export of Database Scheme Action.
//         5.3 Finialized ActionCommand 'DESQLD' to Create New Object
//             SQLDatabaseDumpThread.
//         5.4 Added Class Instance fileName to Arguments in Class Object
//             SQLDatabaseDumpThread.
//         5.5 Added Class Instance queryFrameVisible and Class Method
//             setQueryFrameVisisble(). Insured No More Than One QueryFrame
//             Created. Code Cleanup.
//         5.6 Removed Argument JFrame, Class Instances mainFrame, and
//             Other Compiler Warnings of Local Varibles Not Being Read.
//         5.7 Used System.getProperty("file.separator") for All File
//             System Resources Accesses Through Instance fileSeparator.
//         5.8 Removed fileSeparator From Help Menu File Strings.
//         5.9 Cleaned Up Javadoc Comments.
//         6.0 Implemented Threaded CVS TableTabPanel Summary Table Dump.
//             Data | Export | CVS Format | Tab Summary Table. Removed
//             Class Method outputSummaryTable().
//         6.1 Changed Action Command Detection for Data | Import | SQL
//             Dump. Added Data | Import | CSV Data.
//         6.2 Change in Action Command for Data | Import | CSV File.
//         6.3 Header Update.
//         6.4 Edit | Preferences Menu Increased Height of editPreferences
//             Frame to 405. MyJSQLView.getDataExportProperties().
//         6.5 Added tableColumnNamesHashMap to DataTableDumpThread()
//             for Export During Data | Export | CSV | Tab Summary Table.
//             All Data Imports Get Warning Dialog.
//         6.6 Set editPreferences Frame Back to Height 400.
//         6.7 Added Method Instance identifierQuoteString to Class Method
//             outputDatabaseScheme().
//        6.71 Comment Changes.
//        6.72 Class Method outputDatabaseScheme() SQLDataDumpThread.generateHeaders()
//             Removed Connection Argument.
//        6.73 Substitution of New Class TableDefinitionGenerator().getTableDefintion()
//             for Same Method in Class SQLDataDumpThread() That Was Removed.
//             Effected Class Method outputDatabaseScheme().
//        6.74 Class Method Instances importData and exportData Name Changes
//             to importDataFileChooser and exportDataFileChooser.
//        6.75 Changed columnNameFields to tableHeadings in Class Method
//             actionsSelection(). Also getTableFields() to getTableHeadings()
//             in Same Method.
//        6.76 Added insertUpdateDialog for CSV Imports in Class Method
//             actionSelection().
//        6.77 Class Instance tableHeadings Derived From Either getAllTableHeadings()
//             or getCurrentTableHeadings() in Class Method actionSelection().
//        6.78 Increased the Size of Preference Frame to Accomodate All the
//             Components.
//        6.79 Added Conditional Argument MyJSQLView.getTableTabCount() != 0 to
//             Several Action Checks To Protect Against Null Exception.
//        6.80 Class Method outputDatabaseScheme(), Modified exportedTable
//             to Properly Reflect Identifier Quoted String to Include Schema
//             and Table Name.
//        6.81 Modified fileName Creation in Class Method actionSelection().
//        6.82 Modified fileName for HSQL Databases for Exports.
//        6.83 Replaced import/exportDataFileChooser With dataFileChooser.
//             Added Class Instances lastImportDirectory & lastExportDirectory.
//             Placed Mechanism in Place to Store These Directories in Class
//             Method actionsSelection(). Added JFrame argument parent to Same
//             Method.
//        6.84 Cleaned Up. Created Class Methods printAction(), dataImportAction(),
//             and dataExportAction().
//        6.85 Minor Format Changes. Class Method outputDatabaseScheme() Needs 
//             Reviewed For Being Threaded, Maybe New Class. Added Note for Task.
//        6.86 Replaced MyJSQLView.getTableTabCount() With DBTablesPanel.getTableCount().
//             Also MyJSQLView.getSelectedTab() With DBTablesPanel.
//             getSelectedTableTabPanel().
//        6.87 MyJSQLView Project Common Source Code Formatting.
//        6.88 Additional Standardation to Comments.
//        6.89 AboutFrame Constructor Icon File Name Change.
//        6.90 Class Method outputDatabaseScheme() getDataExportProperites Changed
//             Over to the MyJSQLView_Frame Class.
//        6.91 SQL Import Added CheckBox to Allow Users to Reload Database As
//             Needed. Class Method dataImportAction().
//        6.92 Added Action For Tools Menu Item Reload Database in actionSelection().
//        6.93 Added Action for Tools Search Database in actionSelection().
//        6.94 Corrected Path Names for Help | Manual/Release/Legal in HelpFrame.
//        6.95 Changed MyJSQLView_Frame.getDatabaseExportProperties() Method. Moved
//             Over to the DBTablesPanel.
//        6.96 Added Conditional Check for NULL Connection in Class Methods
//             flushPrivileges() & outputDatabaseScheme().
//        6.97 Added Action for Schemas Selector.
//        6.98 Schemas Actions Added All actionCommand Processing.
//        6.99 Moved Schemas Actions Down Into Main Sequence in Proper Order.
//             Placed a return After Each Valid Selection, Speed Up Reduce
//             Continued Conditional Tests.
//        7.00 Removed Class Method outputDatabaseScheme(). Replaced With a New
//             Class SQLDatabaseSchemeDumpThread. Called Same in Place of Method.
//        7.01 Added Inner Class Threads for the Menu Items Reload Database &
//             Load Schemas.
//        7.02 Added Activity Status Indicator Starting and Stopping in Actions
//             Reload Database & Load Schemas.
//        7.03 Instance Threads for Reload Database & Load Schemas Name Clarification.
//        7.04 Class Method actionSelection() Provided a String Name for the
//             Threads reloadDatabaseThread & loadSchemasThread.
//        7.05 Reverted URL String Argument to HelpFrame Back to Forward Slashes 
//             Instead of the System fileSeparator.
//        7.06 Comment Updates.
//        7.07 Removed the Word Tab From the SQL & CSV Data Export Menu Items
//             CSV/SQL Summary Table in Class Method dataExportAction().
//        7.08 Class DataTableDumpThread Instantiation Construction Argument
//             tableColumnTypeHashMap Addition in Class Method dataExportAction().
//        7.09 Implementing of Save & Open Feature for Table Summary State From
//             MenuBar. Addition of Class Methods open/saveAction() to the Effect.
//        7.10 Moved Conversion in Class Methods openAction() & saveAction() to
//             TableTabPanel.set/getState() Methods. Moved Loading of State in
//             openAction() to New Class LoadTableStateThread.
//        7.11 Aded flushSoundThread for Flush Action in actionsSelected().
//        7.12 Class Method flushPrivileges() Changed Return Type to boolean.
//        7.13 Minor Comment Changes.
//        7.14 Implemented Dialog to Confirm Overwriting Files in Class Methods
//             saveAction() & dataExportAction() via MyJSQLView_Utils.processFileChooserSelection.
//        7.15 Addition of boolean Argument to CSVDataImportThread Class in Method
//             dataImportAction().
//        7.16 Class Instance fileSeperator Obtained From MyJSQLView_Utils Class.
//        7.17 Changed Package to Reflect Dandy Made Productions Code.
//        7.18 Implemented MyJSQLView_MenuActionCommands.
//        7.19 Class Method dataExportActions() Parameteriezed Instances tableHeadings,
//             tableColumnNamesHashMap, tableColumnClassHashMap, tableColumnTypeHashMap
//             & tableColumnSizeHashMap So As to Bring Code Into Compliance With
//             Java 5.0 API.
//        7.20 Added Action Processing for Data | Export | PDF Format | Summary Table
//             in Class Method dataExportAction().
//        7.21 Threaded HelpFrame Instances for Manual, Legal, & Readme Actions. Also
//             Added a Check Through failedToLoadContents to dispose Frame. Class
//             Method actionSelection().
//        7.22 Added Action Processing for Tools | Plugin Management for the Top JMenuBar.
//             Added Class Instance pluginFrameVisible and Method setPluginFrameVisible().
//        7.23 Changed Class Instance lastSaveDirectory to lastOpenSaveDirectory.
//        7.24 Constructor Changed parent From JFRame to MyJSQLView_Frame Type. Passed
//             parent to PluginFrame Constructor Instantiation.
//        7.25 Updated to Reflect Internationalization Support in Action Methods.
//        7.26 Class Method flushPrivileges() Cast Object Returned by MyJSQLView_Access.
//             getConnection() to Connection.
//        7.27 Class Method actionSelection() Changed Instance dbName to subProtocol.
//             Changes to Access Connections/Errors to the New Redefined Class
//             ConnectionManager in flushPrivileges(). Changed in Collection of Connection
//             Properties, database, in dataExportAction().
//        7.28 Class Method actionSelection() Increased PreferencesFrame, editPreferences,
//             Width Size.
//        7.29 Class Method dataImportAction() insertUpdateDialog.pack() Instead of Sized.
//        7.30 Added Action for Tools SQL Query Bucket in actionSelection(). Also Class
//             Method setSQLQueryBucketFrameNotVisible() in Addition Class Instance
//             sqlQueryBucketFrameVisible. Increase of size of PreferencesFrame From 675x405
//             to 700x435.
//        7.31 Class Method actionSelection() Replacement of Instance subProtocol With
//             dataSourceType and Derivation from ConnectionManager.getDataSourceType().
//        7.32 Added Class Instances DATA_EXPORT_CSV, DATA_EXPORT_PDF, & DATA_EXPORT_SQL.
//        7.33 Increase of size of PreferencesFrame From 700x435 to 750x461.
//        7.34 Added sqlQueryBucketFrame.saveLastUsedList() to Action Exit in Class
//             Method actionSelection().
//        7.35 Copyright Update.
//        7.36 Removed the Casting of (Connection) for the Returned Instance for the
//             ConnectionManager.getConnection() in flushPrivileges().
//        7.37 Change in flushPrivileges() to Throw SQLException Through Finally
//             to Close mysqlStatement. Calling Method actionsSelections() try and
//             catch Added Along With flushed Instance.
//        7.38 Class Method dataExportAction() Calls to Classes to Dump Data Arguments
//             All Changed from Vector to ArrayList Data Types.
//        7.39 Changes in Way MyJSQLView_ResourceBundle Handles the Collection
//             of Resource Strings. Change to resource.getResourceString(key,
//             default).
//        7.40 Addition of Cache Clearing on ACTION_EXIT.
//        7.41 MyJSQLView Class Method Change of getLocaleResourceBundle()
//             to getResourceBundle().
//        7.42 Collection of All Image Resources Through resourceBundle.
//        7.43 Action ACTION_PLUGIN_MANAGEMENT Made managePluginPreferences Resizable
//             & Set Inital Size to 750x450.
//        7.44 Class Method flushPriviledges() Moved Closing of db_resultSet to
//             finally. Initialized flushSuccess to false.
//        7.45 Changed Package Name to com.dandymadeproductions.myjsqlview.gui.
//        7.46 Change in Starting All Threaded Actions Here Instead of in the Individual
//             Class's Constructors. Effects Most Actions That Involves Threads.
//        7.47 Method actionSelection() Change in managePluginPreferences Size to
//             750x475.
//        7.48 Method actionSelection() Plugin Frame startAnimation().
//        7.49 Method dataExportAction() Check for DBTablesPanel.getSelectedTableTabPanel()
//             Not NULL.
//        7.50 Method actionSelection() Call to ConnectionManager.shutdown() Upon Action
//             EXIT
//             
//-----------------------------------------------------------------
//                 danap@dandymadeproductions.com
//=================================================================

package com.dandymadeproductions.myjsqlview.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import javax.sound.sampled.Clip;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;

import com.dandymadeproductions.myjsqlview.MyJSQLView;
import com.dandymadeproductions.myjsqlview.datasource.ConnectionManager;
import com.dandymadeproductions.myjsqlview.datasource.ConnectionProperties;
import com.dandymadeproductions.myjsqlview.gui.panels.DBTablesPanel;
import com.dandymadeproductions.myjsqlview.gui.panels.TableTabPanel;
import com.dandymadeproductions.myjsqlview.io.CSVDataImportThread;
import com.dandymadeproductions.myjsqlview.io.DataDumpThread;
import com.dandymadeproductions.myjsqlview.io.DataTableDumpThread;
import com.dandymadeproductions.myjsqlview.io.LoadTableStateThread;
import com.dandymadeproductions.myjsqlview.io.PDFDataTableDumpThread;
import com.dandymadeproductions.myjsqlview.io.SQLDataDumpImportThread;
import com.dandymadeproductions.myjsqlview.io.SQLDataDumpThread;
import com.dandymadeproductions.myjsqlview.io.SQLDatabaseDumpThread;
import com.dandymadeproductions.myjsqlview.io.SQLDatabaseSchemeDumpThread;
import com.dandymadeproductions.myjsqlview.io.SaveTableStateThread;
import com.dandymadeproductions.myjsqlview.utilities.InputDialog;
import com.dandymadeproductions.myjsqlview.utilities.MyJFileFilter;
import com.dandymadeproductions.myjsqlview.utilities.MyJSQLView_ResourceBundle;
import com.dandymadeproductions.myjsqlview.utilities.MyJSQLView_Utils;

/**
 *    The MyJSQLView_JMenuBarActions class provides the means for
 * selecting the type of actions to execute that are a result of
 * the MyJSQLView_JMenuBar.actionPerformed() events generated by
 * the JMenuBar and JToolBar in MyJSQLView.
 * 
 * @author Dana M. Proctor
 * @version 7.50 02/27/2013
 */

class MyJSQLView_JMenuBarActions extends MyJSQLView implements MyJSQLView_MenuActionCommands, ActionListener
{
   // Class Instances
   private static boolean preferencesVisible = false;
   private static boolean sqlQueryBucketFrameVisible = false;
   private static boolean queryFrameVisible = false;
   private static boolean searchFrameVisible = false;
   private static boolean pluginFrameVisible = false;
   private static String lastOpenSaveDirectory = "";
   private static String lastImportDirectory = "";
   private static String lastExportDirectory = "";
   private static String fileSeparator;
   
   private static String DATA_EXPORT_CSV = "DECSV";
   private static String DATA_EXPORT_PDF = "DEPDF";
   private static String DATA_EXPORT_SQL = "DESQL";

   // Print instances.
   private static PrinterJob currentPrintJob = PrinterJob.getPrinterJob();
   private static PageFormat mPageFormat = currentPrintJob.defaultPage();

   //==============================================================
   // Class method to determine which JMenuBar or JToolBar item was
   // selected and then executing the appropriate response.
   //==============================================================

   protected static void actionsSelection(MyJSQLView_Frame parent, ActionEvent evt,
                                          SQLQueryBucketFrame sqlQueryBucketFrame,
                                          String[] myJSQLView_Version,
                                          String webSiteString)
   {
      // Setting up some needed instance variables.
      String actionCommand;
      Object item;

      fileSeparator = MyJSQLView_Utils.getFileSeparator();

      // Initializing
      
      item = evt.getSource();

      if (item instanceof JMenuItem)
      {
         if (item instanceof JRadioButtonMenuItem)
            actionCommand = "Schemas";
         else
            actionCommand = ((JMenuItem) item).getActionCommand();
      }
      
      else if (item instanceof JButton)
         actionCommand = ((JButton) item).getActionCommand();
      
      else
         actionCommand = "";
      
      //System.out.println(actionCommand);

      // ==================================
      // File Menu Item Selection Routing
      // ==================================

      // Open
      if (actionCommand.equals(ACTION_OPEN) && DBTablesPanel.getTableCount() != 0)
      {
         openAction(parent);
         return;
      }
      
      // Save & Save As..
      if ((actionCommand.equals(ACTION_SAVE) || actionCommand.equals(ACTION_SAVE_AS))
           && DBTablesPanel.getTableCount() != 0)
      {
         saveAction(parent, actionCommand);
         return;
      }

      // Print
      if (actionCommand.equals(ACTION_PRINT) && DBTablesPanel.getTableCount() != 0)
      {
         printAction();
         return;
      }

      // Print PageFormat Dialog
      if (actionCommand.equals(ACTION_PAGE_FORMAT) && DBTablesPanel.getTableCount() != 0)
      {
         currentPrintJob = PrinterJob.getPrinterJob();
         mPageFormat = currentPrintJob.pageDialog(mPageFormat);
         return;
      }
      
      // Exit
      if (actionCommand.equals(ACTION_EXIT))
      {
         sqlQueryBucketFrame.saveLastUsedList();
         ConnectionManager.shutdown("MyJSQLView_JMenuBarActions ACTION_EXIT");
         MyJSQLView_Utils.clearCache();
         System.exit(0);
      }

      // ==================================
      // Edit Menu Item Selection Routing
      // ==================================

      // Preferences
      if (actionCommand.equals(ACTION_PREFERENCES) && !preferencesVisible && DBTablesPanel.getTableCount() != 0)
      {
         // Showing the Edit Preferences Frame.
         PreferencesFrame editPreferences = new PreferencesFrame();
         editPreferences.setSize(750, 461);
         editPreferences.setResizable(false);
         editPreferences.center();
         editPreferences.setVisible(true);
         preferencesVisible = true;
         return;
      }

      // ==================================
      // Data Menu Item Selection Routing
      // ==================================

      // Data Import
      if (actionCommand.equals(ACTION_IMPORT_SQL_DUMP)
          || (actionCommand.equals(ACTION_IMPORT_CSV_FILE) && DBTablesPanel.getTableCount() != 0))
      {
         dataImportAction(parent, actionCommand);
         return;
      }

      // Data Export
      if ((actionCommand.indexOf(DATA_EXPORT_CSV) != -1 || actionCommand.indexOf(DATA_EXPORT_PDF) != -1
            || actionCommand.indexOf(DATA_EXPORT_SQL) != -1)
           && DBTablesPanel.getTableCount() != 0)
      {
         dataExportAction(parent, actionCommand, myJSQLView_Version);
         return;
      }

      // ==================================
      // Tools Menu Item Selection Routing
      // ==================================

      // SQL Query Bucket
      if (actionCommand.equals(ACTION_SQL_QUERY_BUCKET))
      {
         if (!sqlQueryBucketFrameVisible)
         {
            sqlQueryBucketFrame.setVisible(true);
            sqlQueryBucketFrameVisible = true;
         }
         else
         {
            sqlQueryBucketFrame.setVisible(false);
            sqlQueryBucketFrameVisible = false;
          
         }
         return;
      }
      
      // Query Frame
      if (actionCommand.equals(ACTION_QUERY_FRAME) && !queryFrameVisible)
      {
         QueryFrame queryFrame = new QueryFrame();
         queryFrame.setSize(800, 600);
         queryFrame.center();
         queryFrame.setVisible(true);
         queryFrameVisible = true;
         return;
      }
      
      // Reload Database
      if (actionCommand.equals(ACTION_RELOAD_DATABASE))
      {
         DBTablesPanel.startStatusTimer();
         
         Thread reloadDatabaseThread = new Thread(new Runnable()
         {
            public void run()
            {
               MyJSQLView_Frame.reloadDBTables();
               DBTablesPanel.stopStatusTimer();
            }
         }, "MyJSQLView_JMenuBarActions.reloadDatabaseThread");
         reloadDatabaseThread.start();
         return;
      }
      
      // Search Database
      if (actionCommand.equals(ACTION_SEARCH_DATABASE) && !searchFrameVisible)
      {
         if (DBTablesPanel.getTableCount() != 0)
         {
            SearchFrame searchFrame = new SearchFrame();
            searchFrame.setSize(500, 400);
            searchFrame.center();
            searchFrame.setVisible(true);
            searchFrameVisible = true;
         }
         return;
      }
      
      // Plugin Management
      if (actionCommand.equals(ACTION_PLUGIN_MANAGEMENT) && !pluginFrameVisible)
      {
         // Showing the Edit Preferences Frame.
         PluginFrame managePluginPreferences = new PluginFrame(parent);
         managePluginPreferences.setSize(750, 475);
         managePluginPreferences.center();
         managePluginPreferences.setVisible(true);
         managePluginPreferences.startAnimation();
         pluginFrameVisible = true;
         return;
      }
      
      // ==================================
      // Schemas Menu Item Selection Routing
      // ==================================

      // Load Schemas
      if (actionCommand.equals("Schemas"))
      {
         actionCommand = ((JRadioButtonMenuItem) item).getActionCommand();
         if (actionCommand.equals("All"))
         {
            String dataSourceType = ConnectionManager.getDataSourceType();
            
            //String subProtocol = ConnectionManager.getConnectionProperties()
            //                     .getProperty(ConnectionProperties.SUBPROTOCOL);
            if (dataSourceType.equals(ConnectionManager.HSQL)
                || dataSourceType.equals(ConnectionManager.ORACLE))
               actionCommand = "%";
            else if (dataSourceType.equals(ConnectionManager.MYSQL)
                     || dataSourceType.equals(ConnectionManager.POSTGRESQL))
               actionCommand = "";
            else
               actionCommand = null;
         }
         ConnectionManager.setSchemaPattern(actionCommand);
         
         DBTablesPanel.startStatusTimer();
         
         Thread loadSchemasThread = new Thread(new Runnable()
         {
            public void run()
            {
               MyJSQLView_Frame.reloadDBTables(); 
               DBTablesPanel.stopStatusTimer();
            }
         }, "MyJSQLView_JMenuBarActions.loadSchemasThread");
         loadSchemasThread.start();
         return;
      }
      
      // ==================================
      // Help Menu Item Selection Routing
      // ==================================

      // Manual
      if (actionCommand.equals(ACTION_MANUAL))
      {
         Thread helpFrameManualThread = new Thread(new Runnable()
         {
            public void run()
            {
               HelpFrame manualContents = new HelpFrame("MyJSQLView Manual",
                                                        "/docs/Manual/MyJSQLView_Manual.html",
                                                        null);
               if (manualContents.failedToLoadContents)
                  manualContents.dispose();
               else
               {
                  manualContents.setSize(640, 500);
                  manualContents.setVisible(true);
               }
            }
         }, "MyJSQLView_JMenuBarActions.helpFrameManualThread");
         helpFrameManualThread.start();
         return;
      }
      
      // Legal
      if (actionCommand.equals(ACTION_LEGAL))
      {
         Thread helpFrameLegalThread = new Thread(new Runnable()
         {
            public void run()
            {
               HelpFrame legalContents = new HelpFrame("MyJSQLView Legal",
                                                       "/docs/Release/legal.html",
                                                       null);
               if (legalContents.failedToLoadContents)
                  legalContents.dispose();
               else
               {
                  legalContents.setSize(600, 400);
                  legalContents.setVisible(true);
               }
            }
         }, "MyJSQLView_JMenuBarActions.helpFrameLegalThread");
         helpFrameLegalThread.start();
         return;
      }

      // Release Notes (Readme)
      if (actionCommand.equals(ACTION_RELEASE_NOTES))
      {
         Thread helpFrameReadMeThread = new Thread(new Runnable()
         {
            public void run()
            {
               HelpFrame readmeContents = new HelpFrame("MyJSQLView Readme",
                                                        "/docs/Release/readme.html",
                                                        null);
               if (readmeContents.failedToLoadContents)
                  readmeContents.dispose();
               else
               {
                  readmeContents.setSize(640, 500);
                  readmeContents.setVisible(true);
               }
            }
         }, "MyJSQLView_JMenuBarActions.HelpFrameReadMeThread");
         helpFrameReadMeThread.start();
         return;
      }
      
      // About
      if (actionCommand.equals(ACTION_ABOUT))
      {
         ImageIcon myjsqlviewLogo = MyJSQLView.getResourceBundle().getResourceImage("images" + fileSeparator
                                                               + "MyJSQLView_Logo.png");
         AboutFrame about_Frame = new AboutFrame(myJSQLView_Version, webSiteString, myjsqlviewLogo);
         about_Frame.setSize(325, 275);
         about_Frame.center();
         about_Frame.setResizable(false);
         about_Frame.setVisible(true);
         return;
      }

      // ========================================
      // Special User/Database Selection Action
      // ========================================

      // Flush Privileges for root/mysql
      if (actionCommand.equals(ACTION_FLUSH))
      {
         boolean flushed = false;
         try
         {
            flushed = flushPrivileges();
         }
         catch (SQLException e)
         {
            ConnectionManager.displaySQLErrors(e, "MyJSQLView_JMenuBarActions.actionsSelection()");
         }
         
         if (flushed)
         {
            Thread flushSoundThread = new Thread(new Runnable()
            {
               public void run()
               {
                  Clip flushSoundClip = MyJSQLView_Utils.getAudioClip("sounds" + fileSeparator + "flush.wav");
                  
                  if (flushSoundClip != null)
                  {
                     flushSoundClip.setFramePosition(0);
                     flushSoundClip.start();
                     try
                     {
                        Thread.sleep(5000);
                     }
                     catch (InterruptedException e) {}
                     flushSoundClip.close();   
                  }
               }
            }, "MyJSQLView_JMenuBarActions.flushSoundThread");
            flushSoundThread.start();
         }
         return;
      }
   }
   
   //==============================================================
   // Class Method to open a saved configuration state file for
   // a database table.
   //==============================================================

   private static void openAction(JFrame parent)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      String fileName;

      // Choosing the directory to import data from.
      if (lastOpenSaveDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastOpenSaveDirectory));

      // Add a FileFilter for *.myj and open dialog.
      dataFileChooser.setFileFilter(new MyJFileFilter());
      
      int result = dataFileChooser.showOpenDialog(parent);

      // Looks like might be good so lets check and read data.
      if (result == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory so can be used again.
         lastOpenSaveDirectory = dataFileChooser.getCurrentDirectory().toString();

         // Collect file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + fileSeparator + fileName;

         // Try Loading the State.
         if (!fileName.equals(""))
         {  
            Thread loadTableStateThread = new Thread(new LoadTableStateThread(fileName),
                                                     "LoadTableStateThread");
            loadTableStateThread.start();
         }
         else
         {
            createFileNotFoundDialog();
         }
      }
   }
   
   //==============================================================
   // Class Method to save the currented selected database table's
   // state, Ie. query, table columns, table row number, and sort/
   // search fields.
   //==============================================================

   private static void saveAction(JFrame parent, String actionCommand)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      TableTabPanel selectedTableTabPanel;
      String exportedTable, fileName;
      int resultsOfFileChooser;
      Object dumpData;
      
      // Setting up a file name based on whether there has
      // already been a save of the table or save as action.

      // Directory
      if (lastOpenSaveDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastOpenSaveDirectory));

      // Create the File Name from the selected database table
      // panel's state to be exported.
      
      selectedTableTabPanel = DBTablesPanel.getSelectedTableTabPanel();
      if (selectedTableTabPanel == null)
         return;
      exportedTable = selectedTableTabPanel.getTableName();

      if (actionCommand.equals(ACTION_SAVE) && !selectedTableTabPanel.getSaveFileName().equals(""))
         fileName = selectedTableTabPanel.getSaveFileName();
      else
      {
         if (!selectedTableTabPanel.getSaveFileName().equals(""))
            fileName = selectedTableTabPanel.getSaveFileName();
         else
         { 
            if (exportedTable.indexOf(".") != -1)
               fileName = exportedTable.replace('.', '_');
            else
               fileName = exportedTable;
            fileName += ".myj";
         }
      }
      dataFileChooser.setSelectedFile(new File(fileName));

      // Open the file chooser Dialog as needed.
      
      if (actionCommand.equals(ACTION_SAVE) && !selectedTableTabPanel.getSaveFileName().equals(""))
         resultsOfFileChooser = JFileChooser.APPROVE_OPTION;
      else
         resultsOfFileChooser = MyJSQLView_Utils.processFileChooserSelection(parent, dataFileChooser);

      // Looks like might be good so lets check and then write data.
      if (resultsOfFileChooser == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory and file name so can be used again.
         lastOpenSaveDirectory = dataFileChooser.getCurrentDirectory().toString();
         selectedTableTabPanel.setSaveFileName(dataFileChooser.getSelectedFile().getName());

         // Get the file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + fileSeparator + fileName;

         // Save the state as needed.
         if (!fileName.equals(""))
         {
            dumpData = DBTablesPanel.getTableTabPanel(exportedTable).getState();
            Thread saveTableStateThread = new Thread(new SaveTableStateThread(fileName, dumpData),
                                                     "SaveTableStateThread");
            saveTableStateThread.start();
         }
         else
         {
            createFileNotFoundDialog();
         }
      }
   }
   
   //==============================================================
   // Class Method to perform a screen print of the current view
   // of the application.
   //==============================================================

   private static void printAction()
   {
      // Method Instances
      Paper customPaper;
      double margin;
      MyJSQLView_ResourceBundle resourceBundle;
      String resourceTitle;
      
      // Setting up the printing.
      
      customPaper = new Paper();
      margin = 36;
      customPaper.setImageableArea(margin, margin,
                                   customPaper.getWidth() - margin * 2,
                                   customPaper.getHeight() - margin * 2);
      mPageFormat.setPaper(customPaper);

      // Printing the selected Tab
      currentPrintJob.setPrintable(DBTablesPanel.getSelectedTableTabPanel(), mPageFormat);

      // Should have graphics to print now so
      // lets try to print.
      if (currentPrintJob.printDialog())
      {
         try
         {
            currentPrintJob.print();
         }
         catch (PrinterException e)
         {
            resourceBundle = MyJSQLView.getResourceBundle();
            resourceTitle = resourceBundle.getResourceString(
                                         "MyJSQLView_JMenuBarActions.dialogtitle.PrinterException",
                                         "Printer Exception");
            
            JOptionPane.showMessageDialog(null, e.getMessage(), resourceTitle, JOptionPane.ERROR_MESSAGE);
         }
      }
   }

   //==============================================================
   // Class Method to perform the processing for a data import
   // action.
   //==============================================================

   private static void dataImportAction(JFrame parent, String actionCommand)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      MyJSQLView_ResourceBundle resourceBundle;
      String fileName, resource;
      String resourceOK, resourceCancel;

      // Choosing the directory/file to import data from.
      if (lastImportDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastImportDirectory));

      resourceBundle = MyJSQLView.getResourceBundle();
      int result = dataFileChooser.showOpenDialog(parent);

      // Looks like might be good so lets check and write data.
      if (result == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory so can be used again.
         lastImportDirectory = dataFileChooser.getCurrentDirectory().toString();

         // Collect file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + fileSeparator + fileName;
         // System.out.println(fileName);

         if (!fileName.equals(""))
         {
            // Data Import SQL Table(s)
            if (actionCommand.equals(ACTION_IMPORT_SQL_DUMP))
            {
               
               // Create a dialog to warn the user of possible
               // data overwriting. Also allow the selection
               // of reloading the database tables.
               
               InputDialog importWarningDialog;
               JLabel message;
               JCheckBox reloadDBTables;
               
               resource = resourceBundle.getResourceString(
                                     "MyJSQLView_JMenuBarActions.label.WarningImport",
                                     "Warning Import May Cause Loss of Data!");
               message = new JLabel(resource, JLabel.CENTER);
               
               resource = resourceBundle.getResourceString(
                                     "MyJSQLView_JMenuBarActions.checkbox.ReloadDatabaseTables",
                                     "Reload Database Tables?");
               reloadDBTables = new JCheckBox(resource, false);
               
               Object[] content = {message, reloadDBTables};

               resource = resourceBundle.getResourceString(
                                     "MyJSQLView_JMenuBarActions.dialogtitle.ImportWarning",
                                     "Import Warning");
               resourceOK = resourceBundle.getResourceString("MyJSQLView_JMenuBarActions.button.OK", "OK");
               resourceCancel = resourceBundle.getResourceString("MyJSQLView_JMenuBarActions.button.Cancel",
                                                                 "Cancel");
               
               importWarningDialog = new InputDialog(null, resource, resourceOK, resourceCancel,
                                                     content, null);
               importWarningDialog.pack();
               importWarningDialog.center();
               importWarningDialog.setResizable(false);
               importWarningDialog.setVisible(true);

               // If conformation proceed.
               if (importWarningDialog.isActionResult())
               {
                  Thread sqlDataDumpImportThread;
                  
                  //  Load SQL file and reload the application
                  // with modified database tables as needed.
                  if (reloadDBTables.isSelected())
                     sqlDataDumpImportThread = new Thread(new SQLDataDumpImportThread(fileName, true),
                                                          "SQLDataDumpImportThread");
                  else
                     sqlDataDumpImportThread = new Thread(new SQLDataDumpImportThread(fileName, false),
                                                          "SQLDataDumpImportThread");
                  sqlDataDumpImportThread.start();
               }

               importWarningDialog.dispose();
            }

            // Date Import CSV File
            else if (actionCommand.equals(ACTION_IMPORT_CSV_FILE))
            {
               // Create a dialog to warn the user of possible
               // data overwriting and selecting Insert or Update.
               InputDialog insertUpdateDialog;

               // Insert/Update Content.
               ButtonGroup insertUpdateOptionsGroup = new ButtonGroup();
               JRadioButton insertRadioButton, updateRadioButton;
               
               resource = resourceBundle.getResourceString("MyJSQLView_JMenuBarActions.radiobutton.Insert",
                                                           "Insert");
               insertRadioButton = new JRadioButton(resource, true);
               insertUpdateOptionsGroup.add(insertRadioButton);
               
               resource = resourceBundle.getResourceString("MyJSQLView_JMenuBarActions.radiobutton.Update",
                                                           "Update");
               updateRadioButton = new JRadioButton(resource, false);
               insertUpdateOptionsGroup.add(updateRadioButton);

               resource = resourceBundle.getResourceString("MyJSQLView_JMenuBarActions.label.WarningImport",
                                                           "Warning Import May Cause Loss of Data!");
               
               Object content[] = {resource, insertRadioButton, updateRadioButton};
               
               resource = resourceBundle.getResourceString(
                                     "MyJSQLView_JMenuBarActions.dialogtitle.InsertOrUpdate",
                                     "Insert Or Update?"); 
               resourceOK = resourceBundle.getResourceString("MyJSQLView_JMenuBarActions.button.OK",
                                                             "OK");
               resourceCancel = resourceBundle.getResourceString("MyJSQLView_JMenuBarActions.button.Cancel",
                                                                 "Cancel");
                  
               insertUpdateDialog = new InputDialog(null, resource, resourceOK, resourceCancel,
                                                     content, null);
               insertUpdateDialog.pack();
               insertUpdateDialog.setResizable(false);
               insertUpdateDialog.center();
               insertUpdateDialog.setVisible(true);

               // If ok proceed.
               if (insertUpdateDialog.isActionResult())
               {
                  String csvOption;

                  if (insertRadioButton.isSelected())
                     csvOption = insertRadioButton.getText();
                  else
                     csvOption = updateRadioButton.getText();

                  Thread csvDataImportThread = new Thread(new CSVDataImportThread(fileName, csvOption,
                                                                                  false),
                                                          "CSVDataImportThread");
                  csvDataImportThread.start();
               }

               insertUpdateDialog.dispose();
            }
         }
         else
         {
            createFileNotFoundDialog();
         }
      }
   }

   //==============================================================
   // Class Method to perform the processing for an data export
   // action.
   //==============================================================

   private static void dataExportAction(JFrame parent, String actionCommand,
                                        String[] myJSQLView_Version)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      String fileName;
      String exportedTable, database;
      HashMap<String, String> tableColumnNamesHashMap;
      HashMap<String, String> tableColumnClassHashMap;
      HashMap<String, String> tableColumnTypeHashMap;
      HashMap<String, Integer> tableColumnSizeHashMap;
      JTable summaryListTable;

      // Initializing
      tableColumnNamesHashMap = new HashMap <String, String>();
      tableColumnClassHashMap = new HashMap <String, String>();
      tableColumnTypeHashMap = new HashMap <String, String>();
      tableColumnSizeHashMap = new HashMap <String, Integer>();

      // Setting up a default file name based on the selected
      // database, or table and date.

      if (lastExportDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastExportDirectory));

      SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
      database = ConnectionManager.getConnectionProperties().getProperty(ConnectionProperties.DB);
      if (database.indexOf(";") != -1)
         database = database.replaceAll(";", "");
      
      if (DBTablesPanel.getSelectedTableTabPanel() == null)
         return;
      
      exportedTable = DBTablesPanel.getSelectedTableTabPanel().getTableName();

      if (actionCommand.equals(ACTION_EXPORT_SQL_DATABASE))
         fileName = database;
      else if (actionCommand.equals(ACTION_EXPORT_SQL_DATABASE_SCHEME))
         fileName = database + "_scheme";
      else
      {
         if (exportedTable.indexOf(".") != -1)
            fileName = exportedTable.replace('.', '_');
         else
            fileName = exportedTable;
      }

      fileName += "_" + dateFormat.format(new Date());

      if (actionCommand.indexOf(DATA_EXPORT_CSV) != -1)
         fileName += ".csv";
      else if (actionCommand.indexOf(DATA_EXPORT_PDF) != -1)
         fileName += ".pdf";
      // DATA_EXPORT_SQL
      else
         fileName += ".sql";

      dataFileChooser.setSelectedFile(new File(fileName));

      int result = MyJSQLView_Utils.processFileChooserSelection(parent, dataFileChooser);

      // Looks like might be good so lets check and then write data.
      if (result == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory so can be used again.
         lastExportDirectory = dataFileChooser.getCurrentDirectory().toString();

         // Set the file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + fileSeparator + fileName;
         // System.out.println(fileName);

         if (!fileName.equals(""))
         {
            // Select the table and fields to export and
            // then outputting the data via the appropriate
            // approach.
            
            ArrayList<String> tableHeadings = new ArrayList <String>();
            
            if (actionCommand.equals(ACTION_EXPORT_CSV_TABLE)
                || actionCommand.equals(ACTION_EXPORT_CSV_SUMMARY_TABLE)
                || actionCommand.equals(ACTION_EXPORT_PDF_SUMMARY_TABLE)
                || actionCommand.equals(ACTION_EXPORT_SQL_TABLE)
                || actionCommand.equals(ACTION_EXPORT_SQL_SUMMARY_TABLE))
            {
               tableHeadings = new ArrayList <String>();
               tableHeadings = (DBTablesPanel.getSelectedTableTabPanel()).getAllTableHeadings();
               tableColumnNamesHashMap = (DBTablesPanel.getSelectedTableTabPanel()).getColumnNamesHashMap();
               tableColumnClassHashMap = (DBTablesPanel.getSelectedTableTabPanel()).getColumnClassHashMap();
               tableColumnTypeHashMap = (DBTablesPanel.getSelectedTableTabPanel()).getColumnTypeHashMap();
               tableColumnSizeHashMap = (DBTablesPanel.getSelectedTableTabPanel()).getColumnSizeHashMap();
            }

            // Data Export CSV Table
            if (actionCommand.equals(ACTION_EXPORT_CSV_TABLE))
            {
               summaryListTable = null;
               Thread dataDumpThread = new Thread(new DataDumpThread(tableHeadings,
                                                                     tableColumnNamesHashMap,
                                                                     tableColumnClassHashMap,
                                                                     tableColumnTypeHashMap,
                                                                     tableColumnSizeHashMap,
                                                                     exportedTable, fileName),
                                                  "DataDumpThread");
               dataDumpThread.start();
            }

            // Data Export CSV Summary Table
            else if (actionCommand.equals(ACTION_EXPORT_CSV_SUMMARY_TABLE))
            {
               summaryListTable = (DBTablesPanel.getSelectedTableTabPanel()).getListTable();
               if (summaryListTable != null)
               {
                  Thread dataTableDumpThread = new Thread(new DataTableDumpThread(summaryListTable,
                                                                                  tableColumnNamesHashMap,
                                                                                  tableColumnTypeHashMap,
                                                                                  exportedTable, fileName),
                                                          "DataTableDumpThread");
                  dataTableDumpThread.start();
               }
            }
            
            // Data Export PDF Summary Table
            else if (actionCommand.equals(ACTION_EXPORT_PDF_SUMMARY_TABLE))
            {
               summaryListTable = (DBTablesPanel.getSelectedTableTabPanel()).getListTable();
               if (summaryListTable != null)
               {
                  Thread pdfDataTableDumpThread = new Thread(new PDFDataTableDumpThread(summaryListTable,
                                                                                        tableColumnTypeHashMap,
                                                                                        exportedTable,
                                                                                        fileName),
                                                             "PDFDataTableDumpThread");
                  pdfDataTableDumpThread.start();
               }
            }

            // Data Export SQL Table
            else if (actionCommand.equals(ACTION_EXPORT_SQL_TABLE))
            {
               Thread sqlDataDumpThread = new Thread(new SQLDataDumpThread(tableHeadings,
                                                                           tableColumnNamesHashMap, false,
                                                                           tableColumnClassHashMap,
                                                                           tableColumnTypeHashMap,
                                                                           exportedTable, fileName,
                                                                           myJSQLView_Version),
                                                                           "SQLDataDumpThread");
               sqlDataDumpThread.start();
            }

            // Data Export SQL Summary Table
            else if (actionCommand.equals(ACTION_EXPORT_SQL_SUMMARY_TABLE))
            {
               tableHeadings = new ArrayList <String>();
               tableHeadings = (DBTablesPanel.getSelectedTableTabPanel()).getCurrentTableHeadings();

               Thread sqlDataDumpThread = new Thread(new SQLDataDumpThread(tableHeadings,
                                                                           tableColumnNamesHashMap, true,
                                                                           tableColumnClassHashMap,
                                                                           tableColumnTypeHashMap,
                                                                           exportedTable, fileName,
                                                                           myJSQLView_Version),
                                                                           "SQLDataDumpThread");
               sqlDataDumpThread.start();
            }

            // Data Export SQL Database
            else if (actionCommand.equals(ACTION_EXPORT_SQL_DATABASE))
            {
               Thread sqlDatabaseDumpThread = new Thread(new SQLDatabaseDumpThread(
                  fileName, myJSQLView_Version), "SQLDatabaseDumpThread");
               sqlDatabaseDumpThread.start();
            }

            // Data Export SQL Database Scheme. Must be "DESQLDS", ACTION_EXPORT_SQL_DATABASE_SCHEME.
            else
            {
               Thread sqlDatabaseSchemeDumpThread = new Thread(
                  new SQLDatabaseSchemeDumpThread(fileName, myJSQLView_Version),
                  "SQLDatabaseSchemeDumpThread");
               sqlDatabaseSchemeDumpThread.start();
            }
         }
         else
         {
            createFileNotFoundDialog();
         }
      }
   }

   //==============================================================
   // Class Method to flush privileges for the a special case of
   // the user being root and connected to a mysql database.
   //==============================================================

   private static boolean flushPrivileges() throws SQLException
   {
      // Class Method Instances.
      String sqlStatementString;
      Statement mysqlStatement;
      ResultSet db_resultSet;
      boolean flushSuccess;

      // Get Connection to Database.
      Connection dbConnection = ConnectionManager.getConnection(
         "MyJSQLView_JMenuBarActions.flushPrivileges()");
      
      if (dbConnection == null)
         return false;

      // Connecting to the data base, to obtain
      // the selected entry.
      
      mysqlStatement = null;
      db_resultSet = null;
      flushSuccess = false;
      
      try
      {
         // Begin the SQL statement creation.
         mysqlStatement = dbConnection.createStatement();
         sqlStatementString = "FLUSH PRIVILEGES";
         // System.out.println(sqlStatementString);

         // Might want to use the result at a later version.
         db_resultSet = mysqlStatement.executeQuery(sqlStatementString);

         db_resultSet.close();
         flushSuccess = true;
      }
      catch (SQLException e)
      {
         ConnectionManager.displaySQLErrors(e, "MyJSQLView_JMenuBarActions.flushPrivileges()");
      }
      finally
      {
         try
         {
            if (mysqlStatement != null)
               mysqlStatement.close();
         }
         catch (SQLException sqle)
         {
            ConnectionManager.displaySQLErrors(sqle, "MyJSQLView_JMenuBarActions.flushPrivileges()");
         }
         finally
         {
            if (db_resultSet != null)
               db_resultSet.close();
         }
      }

      ConnectionManager.closeConnection(dbConnection, "MyJSQLView_JMenuBarActions.flushPrivileges()");
      return flushSuccess;
   }
   
   //==============================================================
   // Class Method to show a file not found dialog.
   //==============================================================

   private static void createFileNotFoundDialog()
   {
      // Method Instances
      MyJSQLView_ResourceBundle resourceBundle;
      String resourceTitle, resourceMessage;
      
      // Create the dialog.
      resourceBundle = MyJSQLView.getResourceBundle();
      resourceTitle = resourceBundle.getResourceString("MyJSQLView_JMenuBarActions.dialogtitle.Alert",
                                                       "Alert");
      resourceMessage = resourceBundle.getResourceString(
                                   "MyJSQLView_JMenuBarActions.dialogmessage.FileNOTFound",
                                   "File NOT Found");
      
      JOptionPane.showMessageDialog(null, resourceMessage, resourceTitle, JOptionPane.ERROR_MESSAGE);
   }

   //==============================================================
   // Class Method to allow the setting the preferencesVisible
   // instance. Insure not more than one PreferencesFrame will be
   // open at one time.
   //==============================================================

   protected static void setPreferencesNotVisisble()
   {
      preferencesVisible = false;
   }
   
   //==============================================================
   // Class Method to allow the setting the sqlQueryBucketFrameVisible
   // instance.
   //==============================================================
   
   protected static void setSQLQueryBucketFrameNotVisisble()
   {
      sqlQueryBucketFrameVisible = false;
   }

   //==============================================================
   // Class Method to allow the setting the queryFrameVisible
   // instance. Insure not more than one QueryFrame will be
   // created.
   //==============================================================

   protected static void setQueryFrameNotVisisble()
   {
      queryFrameVisible = false;
   }
   
   //==============================================================
   // Class Method to allow the setting the searchFrameVisible
   // instance. Insure not more than one SearchyFrame will be
   // created.
   //==============================================================

   protected static void setSearchFrameNotVisisble()
   {
      searchFrameVisible = false;
   }
   
   //==============================================================
   // Class Method to allow the setting the pluginFrameVisible
   // instance. Insure not more than one PluginFrame will be
   // created.
   //==============================================================

   protected static void setPluginFrameNotVisisble()
   {
      pluginFrameVisible = false;
   }
}
